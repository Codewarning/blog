import{_ as i,W as u,X as d,Z as c,$ as s,Y as l,D as r,a0 as n,a1 as a}from"./framework-37da0de1.js";const k={},m=l('<h1 id="springboot集成validation数据校验" tabindex="-1"><a class="header-anchor" href="#springboot集成validation数据校验" aria-hidden="true">#</a> Springboot集成validation数据校验</h1><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h2><p><code>validation</code>的作用是校验<code>http</code>网络请求参数是否合法的相关库，比如<code>get</code>请求中<code>username</code>参数可以校验长度、正则匹配等，如果校验失败，失败信息也可以自定义，也可以校验<code>post</code>请求中的<code>Object</code>对象参数等。</p><p>实现原理是使用AOP在接口的Before切面中根据参数的相关校验注解进行校验，错误则直接抛出异常。</p><h2 id="添加依赖" tabindex="-1"><a class="header-anchor" href="#添加依赖" aria-hidden="true">#</a> 添加依赖</h2><p>首先需要先在项目的<code>maven</code>的<code>pom.xml</code>文件中添加依赖：</p>',6),v=n("div",{class:"language-xml line-numbers-mode","data-ext":"xml"},[n("pre",{class:"language-xml"},[n("code",null,[n("span",{class:"token comment"},"<!--添加依赖-->"),a(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("dependency")]),n("span",{class:"token punctuation"},">")]),a(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("groupId")]),n("span",{class:"token punctuation"},">")]),a("org.springframework.boot"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("groupId")]),n("span",{class:"token punctuation"},">")]),a(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("artifactId")]),n("span",{class:"token punctuation"},">")]),a("spring-boot-starter-validation"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("artifactId")]),n("span",{class:"token punctuation"},">")]),a(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("dependency")]),n("span",{class:"token punctuation"},">")]),a(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),g=n("div",{class:"language-xml line-numbers-mode","data-ext":"xml"},[n("pre",{class:"language-xml"},[n("code",null,[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("dependency")]),n("span",{class:"token punctuation"},">")]),a(`
   `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("groupId")]),n("span",{class:"token punctuation"},">")]),a("org.hibernate.validator"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("groupId")]),n("span",{class:"token punctuation"},">")]),a(`
   `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("artifactId")]),n("span",{class:"token punctuation"},">")]),a("hibernate-validator"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("artifactId")]),n("span",{class:"token punctuation"},">")]),a(`
   `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("version")]),n("span",{class:"token punctuation"},">")]),a("6.0.8.Final"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("version")]),n("span",{class:"token punctuation"},">")]),a(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("dependency")]),n("span",{class:"token punctuation"},">")]),a(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),b=l(`<h2 id="校验注解" tabindex="-1"><a class="header-anchor" href="#校验注解" aria-hidden="true">#</a> 校验注解</h2><h3 id="bean-validation" tabindex="-1"><a class="header-anchor" href="#bean-validation" aria-hidden="true">#</a> Bean Validation</h3><table><thead><tr><th>属性</th><th>修饰对象</th><th>校验详情</th></tr></thead><tbody><tr><td>@Null</td><td></td><td>被注释的元素必须为 null</td></tr><tr><td>@NotNull</td><td>属性</td><td>属性不能为null</td></tr><tr><td>@AssertTrue</td><td></td><td>用于boolean字段，该字段只能为true</td></tr><tr><td>@AssertFalse</td><td></td><td>被注释的元素必须为 false</td></tr><tr><td>@Min(value)</td><td>数字，数字字符串</td><td>被注释的元素必须是一个数字，其值必须大于等于指定的最小值</td></tr><tr><td>@Max(value)</td><td>数字，数字字符串</td><td>被注释的元素必须是一个数字，其值必须小于等于指定的最大值</td></tr><tr><td>@DecimalMin(value)</td><td></td><td>被注释的元素必须是一个数字，其值必须大于等于指定的最小值</td></tr><tr><td>@DecimalMax(value)</td><td></td><td>被注释的元素必须是一个数字，其值必须小于等于指定的最大值</td></tr><tr><td>@Size(max, min)</td><td>数组、集合</td><td>检查元素个数是否在范围之内，包括相等的情况</td></tr><tr><td>@Digits(integer, fraction)</td><td>内容为数字的String</td><td>被注释的元素必须是一个数字，其值必须在可接受的范围内</td></tr><tr><td>@Past</td><td>Date或者calendar</td><td>被注释的元素必须是一个过去的日期</td></tr><tr><td>@Future</td><td>Date或者calendar</td><td>被注释的元素必须是一个将来的日期</td></tr><tr><td>@Pattern(value)</td><td>String类型</td><td>检查属性根据匹配标识（flag）来判断是否要求匹配（java.util.regex.Pattern）</td></tr><tr><td>@Valid</td><td>Object</td><td>检查其中的每一个对象。如果对象是Map，则检查每一个Value域对象</td></tr></tbody></table><h3 id="hibernate-validation" tabindex="-1"><a class="header-anchor" href="#hibernate-validation" aria-hidden="true">#</a> Hibernate Validation</h3><table><thead><tr><th>属性</th><th>修饰对象</th><th>校验详情</th></tr></thead><tbody><tr><td>@Email</td><td></td><td>被注释的元素必须是电子邮箱地址</td></tr><tr><td>@Length(min=,max=)</td><td>String</td><td>字符串的长度，包括数字字符串的长度 注：不检测属性是否为null</td></tr><tr><td>@Range(min=,max=,message=)</td><td>数字、数字的String</td><td>属性的值的范围，包括数字字符串的数字值</td></tr><tr><td>@NotEmpty</td><td>属性</td><td>属性不能为null且不能为空（比如String就不能为””）如果是集合类型的话，不能为null且不能为空（size()==0）</td></tr><tr><td>@NotBlank(message =)</td><td></td><td>用在String上面 ,检查约束 (字符串) 是不是Null还有被Trim的长度是否大于0,只对字符串,且会去掉前后空格</td></tr><tr><td>@CreditCardNumber</td><td></td><td>对信用卡号进行一个大致的验证</td></tr><tr><td>@URL(protocol=,host,port)</td><td></td><td>检查是否是一个有效的URL，如果提供了protocol，host等，则该URL还需满足提供的条件</td></tr></tbody></table><h2 id="校验异常" tabindex="-1"><a class="header-anchor" href="#校验异常" aria-hidden="true">#</a> 校验异常</h2><h3 id="异常类" tabindex="-1"><a class="header-anchor" href="#异常类" aria-hidden="true">#</a> 异常类</h3><p><strong>ConstraintViolationException</strong></p><ul><li><p>接口中参数校验不通过，比如直接在controller层直接对请求参数进行校验</p></li><li><p>校验的是<code>Key-value</code>形式的参数产生的异常</p></li><li><p>参数校验不通过抛出该异常</p></li></ul><p><strong>MethodArgumentNotValidException</strong></p><ul><li>以<code>json</code>格式提交有效，使用<code>@RequestBody</code>。</li><li>在实体类中对属性使用参数校验注解</li><li>参数校验不通过抛出该异常</li></ul><p><strong>BindException</strong></p><ul><li>对<strong>表单</strong>提交有效，请求参数以表单的形式提交。</li><li>参数校验不通过抛出该异常</li></ul><h3 id="异常配置类" tabindex="-1"><a class="header-anchor" href="#异常配置类" aria-hidden="true">#</a> 异常配置类</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>hibernate<span class="token punctuation">.</span>validator<span class="token punctuation">.</span></span><span class="token class-name">HibernateValidator</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>validation<span class="token punctuation">.</span>beanvalidation<span class="token punctuation">.</span></span><span class="token class-name">MethodValidationPostProcessor</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>validation<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 通过这个配置改成校验参数时只要出现校验失败的情况，就立即抛出对应的异常，结束校验，不再进行后续的校验
 */</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ValidConfig</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Validator</span> <span class="token function">validator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ValidatorFactory</span> validatorFactory <span class="token operator">=</span> <span class="token class-name">Validation</span><span class="token punctuation">.</span><span class="token function">byProvider</span><span class="token punctuation">(</span><span class="token class-name">HibernateValidator</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token comment">//failFast的意思只要出现校验失败的情况，就立即结束校验，不再进行后续的校验。</span>
                <span class="token punctuation">.</span><span class="token function">failFast</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">buildValidatorFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> validatorFactory<span class="token punctuation">.</span><span class="token function">getValidator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">MethodValidationPostProcessor</span> <span class="token function">methodValidationPostProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">MethodValidationPostProcessor</span> methodValidationPostProcessor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MethodValidationPostProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        methodValidationPostProcessor<span class="token punctuation">.</span><span class="token function">setValidator</span><span class="token punctuation">(</span><span class="token function">validator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> methodValidationPostProcessor<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="异常处理" tabindex="-1"><a class="header-anchor" href="#异常处理" aria-hidden="true">#</a> 异常处理</h2><h3 id="k-v异常处理" tabindex="-1"><a class="header-anchor" href="#k-v异常处理" aria-hidden="true">#</a> K-V异常处理</h3><p><code>K-V</code>即<code>Key-Value</code>，也就是简单数据校验，参数在<code>url</code>上面，常见的是<code>get</code>请求，比如<code>xxx?name=admin&amp;password=123456</code>。</p><p>简单数据校验需要处理<code>ConstraintViolationException</code>异常，当接口中参数校验不通过时，比如直接在<code>controller</code>层直接对请求参数进行校验，不通过则会抛出该异常。<strong>校验的是Key-value形式的参数产生的异常</strong></p><p><strong>异常处理</strong>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@ControllerAdvice</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalException</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">GlobalException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">ConstraintViolationException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@ResponseBody</span>
    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token class-name">ConstraintViolationExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">ConstraintViolationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> message <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getConstraintViolations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">ConstraintViolation</span><span class="token operator">::</span><span class="token function">getMessage</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//message是第一个校验失败注解中message的参数值</span>
        <span class="token keyword">return</span> <span class="token class-name">ResultUtil</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">Message参数</p><p><strong>message是第一个校验失败注解中message的参数值</strong>，比如以下代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Length</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">&quot;长度要在6到20之间&quot;</span><span class="token punctuation">)</span>
<span class="token class-name">String</span> username<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>username</code>长度不再6到20之间时，也就是不满足校验条件，抛出异常，其中以上代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> message <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getConstraintViolations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">ConstraintViolation</span><span class="token operator">::</span><span class="token function">getMessage</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>message</code>的值也就是上面那个校验失败所对应的注解中的<code>message</code>参数，即<code>String message = &quot;长度要在6到20之间&quot;</code></p></div><h3 id="entity校验" tabindex="-1"><a class="header-anchor" href="#entity校验" aria-hidden="true">#</a> Entity校验</h3><p>也就是<code>Java Bean</code>校验，比如校验<code>Post</code>提交中的<code>User</code>类参数，需要先在需要校验的<code>Class</code>的相关属性上添加注解，然后在Controller方法的对象参数前添加<code>@Validated</code>注解，这种数据校验失败之后会抛出<code>MethodArgumentNotValidException</code>异常。</p><p><strong>异常处理</strong>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@ControllerAdvice</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalException</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">GlobalException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@ResponseBody</span>
    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">MethodArgumentNotValidException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Result</span> <span class="token function">handleMethodArgumentNotValidException</span><span class="token punctuation">(</span><span class="token class-name">MethodArgumentNotValidException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">String</span> message <span class="token operator">=</span> e
                <span class="token punctuation">.</span><span class="token function">getBindingResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">getAllErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">DefaultMessageSourceResolvable</span><span class="token operator">::</span><span class="token function">getDefaultMessage</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">ResultUtil</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>Entity</code>校验失败之后会抛出异常，其中的<code>message</code>值就是校验失败对应的注解的<code>message</code>的值，与<strong>K-V异常处理</strong>抛出的异常中<code>message</code>的值原理一样。</p><h2 id="使用校验" tabindex="-1"><a class="header-anchor" href="#使用校验" aria-hidden="true">#</a> 使用校验</h2><h3 id="校验k-v" tabindex="-1"><a class="header-anchor" href="#校验k-v" aria-hidden="true">#</a> 校验K-V</h3><p><strong>使用步骤</strong>：</p><ol><li>在需要校验的<code>Controller</code>类上添加<code>@Validated</code>注解</li><li>在需要校验的方法参数前面添加<code>Bean Validation</code>或者<code>Hibernate Validation</code>相关注解</li></ol><p><strong>样例</strong>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Validated</span>
<span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;image&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PictureController</span><span class="token punctuation">{</span>
	<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;getImage/{account}/{imgName}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getImage</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">&quot;参数错误&quot;</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">String</span> account<span class="token punctuation">,</span>
                        <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">&quot;参数错误&quot;</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">String</span> imgName<span class="token punctuation">,</span>
                            <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">MyException</span><span class="token punctuation">{</span>
         <span class="token comment">//TODO</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="校验entity" tabindex="-1"><a class="header-anchor" href="#校验entity" aria-hidden="true">#</a> 校验Entity</h3><p><strong>使用步骤</strong>：</p><ol><li>在需要校验的Entity类的参数上面添加<code>Bean Validation</code>或者<code>Hibernate Validation</code>相关注解</li><li>在需要校验的<code>Controller</code>类上添加<code>@Validated</code>注解</li><li>在<code>Controller</code>中需要校验的方法中的<code>Entity</code>参数前面添加<code>@Valid</code>注解</li></ol><p><strong>样例</strong>：</p>`,37),h=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@Data"),a(`
`),n("span",{class:"token keyword"},"public"),a(),n("span",{class:"token keyword"},"class"),a(),n("span",{class:"token class-name"},"UserRegisterDto"),a(),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token annotation punctuation"},"@NotBlank"),n("span",{class:"token punctuation"},"("),a("message "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token string"},'"用户名不能为空"'),n("span",{class:"token punctuation"},")"),a(`
    `),n("span",{class:"token annotation punctuation"},"@Length"),n("span",{class:"token punctuation"},"("),a("min "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token number"},"6"),n("span",{class:"token punctuation"},","),a("max "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token number"},"18"),n("span",{class:"token punctuation"},","),a("message "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token string"},'"用户名长度必须在6到18个字符之间"'),n("span",{class:"token punctuation"},")"),a(`
    `),n("span",{class:"token annotation punctuation"},"@Pattern"),n("span",{class:"token punctuation"},"("),a("regexp "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token string"},'"^\\\\s*|[0-9A-Za-z]*$"'),n("span",{class:"token punctuation"},","),a(" message "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token string"},'"用户名为数字和字母组合"'),n("span",{class:"token punctuation"},")"),a(`
    `),n("span",{class:"token keyword"},"private"),a(),n("span",{class:"token class-name"},"String"),a(" account"),n("span",{class:"token punctuation"},";"),a(`
    
    `),n("span",{class:"token annotation punctuation"},"@NotBlank"),n("span",{class:"token punctuation"},"("),a("message "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token string"},'"邮箱不能为空"'),n("span",{class:"token punctuation"},")"),a(`
    `),n("span",{class:"token annotation punctuation"},"@Email"),n("span",{class:"token punctuation"},"("),a("message "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token string"},'"邮箱不合法"'),n("span",{class:"token punctuation"},")"),a(`
    `),n("span",{class:"token keyword"},"private"),a(),n("span",{class:"token class-name"},"String"),a(" email"),n("span",{class:"token punctuation"},";"),a(`
    
    `),n("span",{class:"token annotation punctuation"},"@NotBlank"),n("span",{class:"token punctuation"},"("),a("message "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token string"},'"密码不能为空"'),n("span",{class:"token punctuation"},")"),a(`
    `),n("span",{class:"token annotation punctuation"},"@Length"),n("span",{class:"token punctuation"},"("),a("min "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token number"},"6"),n("span",{class:"token punctuation"},","),a("max "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token number"},"18"),n("span",{class:"token punctuation"},","),a("message "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token string"},'"密码长度必须在6到18个字符之间"'),n("span",{class:"token punctuation"},")"),a(`
    `),n("span",{class:"token annotation punctuation"},"@Pattern"),n("span",{class:"token punctuation"},"("),a("regexp "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token string"},'"^|[0-9A-Za-z]*$"'),n("span",{class:"token punctuation"},","),a(" message "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token string"},'"密码为数字和字母组合"'),n("span",{class:"token punctuation"},")"),a(`
    `),n("span",{class:"token keyword"},"private"),a(),n("span",{class:"token class-name"},"String"),a(" password"),n("span",{class:"token punctuation"},";"),a(`
`),n("span",{class:"token punctuation"},"}"),a(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),f=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@Validated"),a(`
`),n("span",{class:"token annotation punctuation"},"@RestController"),a(`
`),n("span",{class:"token annotation punctuation"},"@RequestMapping"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"user"'),n("span",{class:"token punctuation"},")"),a(`
`),n("span",{class:"token keyword"},"public"),a(),n("span",{class:"token keyword"},"class"),a(),n("span",{class:"token class-name"},"UserController"),a(),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token comment"},"//在对象的校验属性上添加注解"),a(`
    `),n("span",{class:"token annotation punctuation"},"@PostMapping"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"register"'),n("span",{class:"token punctuation"},")"),a(`
    `),n("span",{class:"token keyword"},"public"),a(),n("span",{class:"token class-name"},"Result"),a(),n("span",{class:"token function"},"register"),n("span",{class:"token punctuation"},"("),n("span",{class:"token annotation punctuation"},"@RequestBody"),a(),n("span",{class:"token annotation punctuation"},"@Valid"),a(),n("span",{class:"token class-name"},"UserRegisterDto"),a(" userRegisterDto"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),a(`
        `),n("span",{class:"token comment"},"//TODO"),a(`
    `),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"}"),a(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1);function y(x,V){const p=r("CodeTabs");return u(),d("div",null,[m,c(p,{id:"18",data:[{title:"Springboot依赖"},{title:"非Springboot依赖"}]},{tab0:s(({title:t,value:e,isActive:o})=>[v]),tab1:s(({title:t,value:e,isActive:o})=>[g]),_:1}),b,c(p,{id:"458",data:[{title:"Entity类"},{title:"Controller类"}]},{tab0:s(({title:t,value:e,isActive:o})=>[h]),tab1:s(({title:t,value:e,isActive:o})=>[f]),_:1})])}const _=i(k,[["render",y],["__file","Springboot集成validation数据校验.html.vue"]]);export{_ as default};
